#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import os
import random
from typing import List

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
)

# --- –õ–û–ì–ò ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –•–ï–õ–ü–ï–†–´ ---
def parse_int(value: str, default: int) -> int:
    try:
        return int(value)
    except Exception:
        return default

def parse_choices(text: str) -> List[str]:
    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏: ; , | –∏–ª–∏ –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
    raw = [p.strip() for p in (
        text.replace("\n", "|").replace(";", "|").replace(",", "|").split("|")
    ) if p.strip()]
    # —É–±—Ä–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Å—Ç—ã–µ
    return [r for r in raw if r]

# --- –ö–û–ú–ê–ù–î–´ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    kb = [
        [
            InlineKeyboardButton("üé≤ /roll", callback_data="help_roll"),
            InlineKeyboardButton("ü™ô /coin", callback_data="help_coin"),
        ],
        [
            InlineKeyboardButton("üéØ /choice", callback_data="help_choice"),
            InlineKeyboardButton("üé∞ /dice", callback_data="help_dice"),
        ],
        [InlineKeyboardButton("üìú /help", callback_data="help_full")],
    ]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä‚Äë–±–æ—Ç. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã.\n"
        "–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç: /roll 1 100",
        reply_markup=InlineKeyboardMarkup(kb),
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /roll [min] [max] ‚Äî —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1‚Ä¶100)\n"
        "‚Ä¢ /coin ‚Äî –æ—Ä—ë–ª/—Ä–µ—à–∫–∞\n"
        "‚Ä¢ /choice –≤–∞—Ä–∏–∞–Ω—Ç1; –≤–∞—Ä–∏–∞–Ω—Ç2; –≤–∞—Ä–∏–∞–Ω—Ç3 ‚Äî –≤—ã–±–µ—Ä—É –æ–¥–∏–Ω\n"
        "‚Ä¢ /dice ‚Äî –∫—É–±–∏–∫ (—Ç–µ–ª–µ–≥—Ä–∞–º‚Äë–∞–Ω–∏–º–∞—Ü–∏—è)\n"
        "\n–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ /roll 1 6\n"
        "‚Ä¢ /choice —á–∞–π, –∫–æ—Ñ–µ, —Å–æ–∫\n"
    )

async def roll(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # /roll [min] [max]
    args = context.args
    if len(args) == 0:
        a, b = 1, 100
    elif len(args) == 1:
        a, b = 1, parse_int(args[0], 100)
    else:
        a, b = parse_int(args[0], 1), parse_int(args[1], 100)

    if a > b:
        a, b = b, a  # –ø–æ–º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏

    # –æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω —á—Ç–æ–±—ã –Ω–µ —É–ª–µ—Ç–µ—Ç—å
    span = b - a
    if span > 10_000_000:
        b = a + 10_000_000

    num = random.randint(a, b)
    await update.message.reply_text(f"üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: *{num}* (–∏–∑ {a}‚Ä¶{b})", parse_mode="Markdown")

async def coin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    side = random.choice(["–û—Ä—ë–ª", "–†–µ—à–∫–∞"])
    await update.message.reply_text(f"ü™ô {side}!")

async def choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = " ".join(context.args) if context.args else ""
    if not text and update.message and update.message.reply_to_message:
        # –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –±–µ—Ä—ë–º —Ç–µ–∫—Å—Ç –æ—Ç—Ç—É–¥–∞
        text = update.message.reply_to_message.text or ""

    items = parse_choices(text)
    if len(items) < 2:
        await update.message.reply_text(
            "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º *2 –≤–∞—Ä–∏–∞–Ω—Ç–∞*.\n"
            "–ü—Ä–∏–º–µ—Ä: `/choice —á–∞–π; –∫–æ—Ñ–µ; —Å–æ–∫`",
            parse_mode="Markdown",
        )
        return

    pick = random.choice(items)
    await update.message.reply_text(f"üéØ –í—ã–±–æ—Ä: *{pick}*", parse_mode="Markdown")

async def dice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await context.bot.send_dice(chat_id=update.effective_chat.id, emoji='üé≤')

# --- CALLBACKS –î–õ–Ø –ö–ù–û–ü–û–ö –°–¢–ê–†–¢–ê ---
async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    data = update.callback_query.data
    await update.callback_query.answer()
    if data == "help_roll":
        await update.callback_query.edit_message_text("–ò—Å–ø–æ–ª—å–∑—É–π: /roll [min] [max]\n–ü—Ä–∏–º–µ—Ä: /roll 1 6")
    elif data == "help_coin":
        await update.callback_query.edit_message_text("–ö–æ–º–∞–Ω–¥–∞ /coin ‚Äî –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ—Ç –º–æ–Ω–µ—Ç–∫—É: –æ—Ä—ë–ª –∏–ª–∏ —Ä–µ—à–∫–∞.")
    elif data == "help_choice":
        await update.callback_query.edit_message_text("–ö–æ–º–∞–Ω–¥–∞ /choice ‚Äî –≤—ã–±–µ—Ä—É –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.\n–ü—Ä–∏–º–µ—Ä: /choice —á–∞–π; –∫–æ—Ñ–µ; —Å–æ–∫")
    elif data == "help_dice":
        await update.callback_query.edit_message_text("–ö–æ–º–∞–Ω–¥–∞ /dice ‚Äî —Ç–µ–ª–µ–≥—Ä–∞–º‚Äë–∞–Ω–∏–º–∞—Ü–∏—è –∫—É–±–∏–∫–∞ üé≤")
    else:
        await update.callback_query.edit_message_text(
            "üìú /help\n"
            "‚Ä¢ /roll [min] [max]\n"
            "‚Ä¢ /coin\n"
            "‚Ä¢ /choice –≤–∞—Ä–∏–∞–Ω—Ç1; –≤–∞—Ä–∏–∞–Ω—Ç2; –≤–∞—Ä–∏–∞–Ω—Ç3\n"
            "‚Ä¢ /dice"
        )

# --- MAIN ---
def main() -> None:
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise SystemExit("–ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN. –°–æ–∑–¥–∞–π—Ç–µ .env –∏–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ BOT_TOKEN.")

    app = Application.builder().token(token).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("roll", roll))
    app.add_handler(CommandHandler("rand", roll))
    app.add_handler(CommandHandler("coin", coin))
    app.add_handler(CommandHandler("choice", choice))
    app.add_handler(CommandHandler("dice", dice))

    # –ö–Ω–æ–ø–∫–∏ –∏–∑ /start
    from telegram.ext import CallbackQueryHandler
    app.add_handler(CallbackQueryHandler(on_callback))

    logger.info("Bot started")
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∑–∏–º .env –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        from dotenv import load_dotenv
        load_dotenv()
    except Exception:
        pass
    main()
